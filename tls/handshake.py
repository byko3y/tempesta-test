# Basic TLS 1.2 handshake test.
#
# Also usable as a TLS traffic generator to debug early TLS server
# implementation. This tool emphasises flexibility in generation of TLS traffic,
# not performance.
#
# ScaPy is still not fully compatible with Python3, but I still use __future__
# module for easier migration to Python3.
# https://github.com/tintinweb/scapy-ssl_tls/issues/39
#
# TLS 1.2 is specified in RFC 5246. See also these useful references:
#   - https://wiki.osdev.org/SSL/TLS
#   - https://wiki.osdev.org/TLS_Handshake
#   - https://wiki.osdev.org/TLS_Encryption

from __future__ import print_function
import random
import socket
import ssl # OpenSSL based API
import struct
import scapy_ssl_tls.ssl_tls as tls

from helpers import dmesg

__author__ = 'Tempesta Technologies, Inc.'
__copyright__ = 'Copyright (C) 2018-2019 Tempesta Technologies, Inc.'
__license__ = 'GPL2'


REQUEST = "GET / HTTP/1.1\r\nHost: tempesta-tech.com\r\n\r\n"
GOOD_RESP = "HTTP/1.1 200"
TLS_HS_WARN = "Warning: Unrecognized TLS receive return code"


def x509_check_cn(cert, cn):
    """
    Decode x509 certificate in BER and check CommonName (CN, OID '2.5.4.3')
    against passed @cn value. ScaPy-TLS can not parse ASN1 from certificates
    generated by the cryptography library, so we can not use full string
    matching and have to use substring matching instead.
    """
    for f in cert.fields['subject']:
        if f.oid.val == '2.5.4.3':
            if str(f.value).endswith(cn):
                return True
            else:
                return False
    raise Exception("Certificate has no CommonName")


def x509_check_issuer(cert, issuer):
    """
    The same as above, but for Issuer OrganizationName (O, OID '2.5.4.10').
    """
    for f in cert.fields['issuer']:
        if f.oid.val == '2.5.4.10':
            if str(f.value).endswith(issuer):
                return True
            else:
                return False
    raise Exception("Certificate has no Issuer OrganizationName")


class TlsHandshake(object):
    """
    Class for custom TLS handshakes - mainly ScaPy-TLS wrapper.
    Update the fields defined in __init__() to customize a handshake.

    Use higher @rto values to debug/test Tempesta in debug mode.
    Use True for @verbose to see debug output for the handshake.
    """
    def __init__(self, addr='127.0.0.1', port=443, rto=0.5, verbose=False):
        self.addr = addr
        self.port = port
        self.rto = rto
        self.verbose = verbose
        # Service members.
        self.sock = None
        # Additional handshake options.
        self.sni = [] # vhost string names
        # HTTP server response (headers and body), if any.
        self.http_resp = None
        # Server certificate.
        self.cert = None

    def conn_estab(self):
        assert not self.sock, "Connection has already been established"
        self.sock = tls.TLSSocket(socket.socket(), client=True)
        # Set large enough send and receive timeouts which will be used by
        # default.
        self.sock.settimeout(self.rto)
        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO,
                             struct.pack('ll', 2, self.rto * 1000))
        self.sock.connect((self.addr, self.port))

    def send_recv(self, pkt):
        """
        Mainly a copy&paste from tls_do_round_trip(), but uses custom timeout to
        be able to fully read all data from Tempesta in verbose debugging mode
        (serial console verbose logging may be extremely slow).
        """
        assert self.sock, "Try to read and write on invalid socket"
        resp = tls.TLS()
        try:
            self.sock.sendall(pkt)
            resp = self.sock.recvall(timeout=self.rto)
            if resp.haslayer(tls.TLSAlert):
                alert = resp[tls.TLSAlert]
                if alert.level != tls.TLSAlertLevel.WARNING:
                    level = tls.TLS_ALERT_LEVELS.get(alert.level, "unknown")
                    desc = tls.TLS_ALERT_DESCRIPTIONS.get(alert.description,
                                                          "unknown description")
                    raise tls.TLSProtocolError("%s alert returned by server: %s"
                                               % (level.upper(), desc.upper()),
                                               pkt, resp)
        except socket.error as sock_except:
            raise tls.TLSProtocolError(sock_except, pkt, resp)
        return resp

    @staticmethod
    def static_rnd(begin, end):
        """ A replacement for random.randint() to return constant results. """
        return (begin + end) / 2

    def extra_extensions(self):
        exts = []
        # Add ServerNameIdentification (SNI) extensiosn by specified vhosts.
        if self.sni:
            sns = [tls.TLSServerName(data=sname) for sname in self.sni]
            exts = exts + [tls.TLSExtension() /
                           tls.TLSExtServerNameIndication(server_names=sns)]
        return exts

    def do_12(self):
        """
        Test TLS 1.2 handshake: establish a new TCP connection and send predefined
        TLS handshake records. This test is suitable for debug build of Tempesta FW,
        which replaces random and time functions with deterministic data. The test
        doesn't actually verify any functionality, but rather just helps to debug
        the core handshake functionality.
        """
        try:
            self.conn_estab()
        except socket.error:
            print("Cannot connect to %s:%d: %s"
                  % (self.addr, self.port, str(socket.error)))
            return 2

        c_h = tls.TLSClientHello(
            gmt_unix_time=0x22222222,
            random_bytes='\x11' * 28,
            cipher_suites=[tls.TLSCipherSuite.ECDHE_ECDSA_WITH_AES_128_GCM_SHA256],
            compression_methods=[tls.TLSCompressionMethod.NULL],
            # EtM isn't supported - just try to negate an unsupported extension.
            extensions=[
                tls.TLSExtension(type=0x16), # Encrypt-then-MAC
                tls.TLSExtension() / tls.TLSExtECPointsFormat(),
                tls.TLSExtension() / tls.TLSExtSupportedGroups(),
                tls.TLSExtension() / tls.TLSExtSignatureAlgorithms()]
            + self.extra_extensions()
        )
        msg1 = tls.TLSRecord(version='TLS_1_2') / \
               tls.TLSHandshakes(handshakes=[tls.TLSHandshake() / c_h])
        if self.verbose:
            msg1.show()

        # Send ClientHello and read ServerHello, ServerCertificate,
        # ServerKeyExchange, ServerHelloDone.
        resp = self.send_recv(msg1)
        self.cert = resp[tls.TLSCertificate].data
        assert self.cert, "No cerfificate received"
        if self.verbose:
            resp.show()

        # Send ClientKeyExchange, ChangeCipherSpec.
        # get_client_kex_data() -> get_client_ecdh_pubkey() -> make_keypair()
        # use random, so replace it with our mock.
        randint_save = random.randint
        random.randint = self.static_rnd
        cke_h = tls.TLSHandshakes(
            handshakes=[tls.TLSHandshake() /
                        self.sock.tls_ctx.get_client_kex_data()])
        random.randint = randint_save
        msg1 = tls.TLSRecord(version='TLS_1_2') / cke_h
        msg2 = tls.TLSRecord(version='TLS_1_2') / tls.TLSChangeCipherSpec()
        if self.verbose:
            msg1.show()
            msg2.show()

        self.sock.sendall(tls.TLS.from_records([msg1, msg2]))
        # Now we can calculate the final session checksum, send ClientFinished,
        # and receive ServerFinished.
        cf_h = tls.TLSHandshakes(
            handshakes=[tls.TLSHandshake() /
                        tls.TLSFinished(
                            data=self.sock.tls_ctx.get_verify_data())])
        msg1 = tls.TLSRecord(version='TLS_1_2') / cf_h
        if self.verbose:
            msg1.show()

        resp = self.send_recv(msg1)
        if self.verbose:
            resp.show()
            print(self.sock.tls_ctx)

        # Send an HTTP request and get a response.
        resp = self.send_recv(tls.TLSPlaintext(data=REQUEST))
        if resp.haslayer(tls.TLSRecord):
            self.http_resp = resp[tls.TLSRecord].data
            res = self.http_resp.startswith(GOOD_RESP)
        else:
            res = False
        if self.verbose:
            if res:
                print("==> Got response from server")
                resp.show()
                print("\n=== PASSED ===\n")
            else:
                print("\n=== FAILED ===\n")

        self.sock.close()
        return res


class TlsHandshakeStandard(object):
    """
    This class uses OpenSSL backend, so all its routines less customizable,
    but are good to test TempestaTLS behavior with standard tools and libs.
    """
    def __init__(self, addr='127.0.0.1', port=443, rto=0.5, verbose=False):
        self.addr = addr
        self.port = port
        self.rto = rto
        self.verbose = verbose

    def try_tls_vers(self, version):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(self.rto)

        # Collect warnings before TCP connection - we should have exactly
        # one warning for the whole test.
        warns = dmesg.count_warnings(TLS_HS_WARN)

        sock.connect((self.addr, self.port))
        try:
            tls_sock = ssl.wrap_socket(sock, ssl_version=version)
        except IOError:
            # Exception on client side TLS with established TCP connection -
            # we're good with connection rejection.
            sock.close()
            if dmesg.count_warnings(TLS_HS_WARN) == warns + 1:
                return True
            if self.verbose:
                print("TLS handshake failed w/o warning")
            return False

        tls_sock.send(REQUEST)
        resp = tls_sock.recv(100)
        tls_sock.close()
        if resp.startswith(GOOD_RESP):
            return False
        return True

    def do_old(self):
        """
        Test TLS 1.0 and TLS 1.1 handshakes.
        Modern OpenSSL versions don't support SSLv{1,2,3}.0, so use TLSv1.{0,1}
        just to test that we correctly drop wrong TLS connections. We do not
        support SSL as well and any SSL record is treated as a broken TLS
        record, so fuzzing of normal TLS fields should be used to test TLS
        fields processing.
        """
        for version in (ssl.PROTOCOL_TLSv1, ssl.PROTOCOL_TLSv1_1):
            if not self.try_tls_vers(version):
                return False
        return True
